{"ast":null,"code":"import * as THREE from \"three\";\nimport gsap from \"gsap\";\nexport default function modifyCityMaterial(mesh) {\n  mesh.material.onBeforeCompile = shader => {\n    // console.log(shader.vertexShader);\n    // console.log(shader.fragmentShader);\n    shader.fragmentShader = shader.fragmentShader.replace(\"#include <dithering_fragment>\", `\n        #include <dithering_fragment>\n        //#end#\n    `);\n    addGradColor(shader, mesh);\n    addSpread(shader);\n    addLightLine(shader);\n    addToTopLine(shader);\n  };\n}\nexport function addGradColor(shader, mesh) {\n  mesh.geometry.computeBoundingBox();\n  //   console.log(mesh.geometry.boundingBox);\n\n  let {\n    min,\n    max\n  } = mesh.geometry.boundingBox;\n  //   获取物体的高度差\n  let uHeight = max.y - min.y;\n  shader.uniforms.uTopColor = {\n    value: new THREE.Color(\"#aaaeff\")\n  };\n  shader.uniforms.uHeight = {\n    value: uHeight\n  };\n  shader.vertexShader = shader.vertexShader.replace(\"#include <common>\", `\n      #include <common>\n      varying vec3 vPosition;\n      `);\n  shader.vertexShader = shader.vertexShader.replace(\"#include <begin_vertex>\", `\n      #include <begin_vertex>\n      vPosition = position;\n  `);\n  shader.fragmentShader = shader.fragmentShader.replace(\"#include <common>\", `\n      #include <common>\n      \n      uniform vec3 uTopColor;\n      uniform float uHeight;\n      varying vec3 vPosition;\n\n        `);\n  shader.fragmentShader = shader.fragmentShader.replace(\"//#end#\", `\n      \n      vec4 distGradColor = gl_FragColor;\n\n      // 设置混合的百分比\n      float gradMix = (vPosition.y+uHeight/2.0)/uHeight;\n      // 计算出混合颜色\n      vec3 gradMixColor = mix(distGradColor.xyz,uTopColor,gradMix);\n      gl_FragColor = vec4(gradMixColor,1);\n        //#end#\n\n      `);\n}","map":{"version":3,"names":["THREE","gsap","modifyCityMaterial","mesh","material","onBeforeCompile","shader","fragmentShader","replace","addGradColor","addSpread","addLightLine","addToTopLine","geometry","computeBoundingBox","min","max","boundingBox","uHeight","y","uniforms","uTopColor","value","Color","vertexShader"],"sources":["E:/three.js/three.js-demo/three-city/city/src/three/modify/modifyCityMaterial.js"],"sourcesContent":["import * as THREE from \"three\";\r\nimport gsap from \"gsap\";\r\nexport default function modifyCityMaterial(mesh) {\r\n  mesh.material.onBeforeCompile = (shader) => {\r\n    // console.log(shader.vertexShader);\r\n    // console.log(shader.fragmentShader);\r\n    shader.fragmentShader = shader.fragmentShader.replace(\r\n      \"#include <dithering_fragment>\",\r\n      `\r\n        #include <dithering_fragment>\r\n        //#end#\r\n    `\r\n    );\r\n    addGradColor(shader, mesh);\r\n    addSpread(shader);\r\n    addLightLine(shader);\r\n    addToTopLine(shader);\r\n  };\r\n}\r\n\r\nexport function addGradColor(shader, mesh) {\r\n  mesh.geometry.computeBoundingBox();\r\n  //   console.log(mesh.geometry.boundingBox);\r\n\r\n  let { min, max } = mesh.geometry.boundingBox;\r\n  //   获取物体的高度差\r\n  let uHeight = max.y - min.y;\r\n\r\n  shader.uniforms.uTopColor = {\r\n    value: new THREE.Color(\"#aaaeff\"),\r\n  };\r\n  shader.uniforms.uHeight = {\r\n    value: uHeight,\r\n  };\r\n\r\n  shader.vertexShader = shader.vertexShader.replace(\r\n    \"#include <common>\",\r\n    `\r\n      #include <common>\r\n      varying vec3 vPosition;\r\n      `\r\n  );\r\n\r\n  shader.vertexShader = shader.vertexShader.replace(\r\n    \"#include <begin_vertex>\",\r\n    `\r\n      #include <begin_vertex>\r\n      vPosition = position;\r\n  `\r\n  );\r\n\r\n  shader.fragmentShader = shader.fragmentShader.replace(\r\n    \"#include <common>\",\r\n    `\r\n      #include <common>\r\n      \r\n      uniform vec3 uTopColor;\r\n      uniform float uHeight;\r\n      varying vec3 vPosition;\r\n\r\n        `\r\n  );\r\n  shader.fragmentShader = shader.fragmentShader.replace(\r\n    \"//#end#\",\r\n    `\r\n      \r\n      vec4 distGradColor = gl_FragColor;\r\n\r\n      // 设置混合的百分比\r\n      float gradMix = (vPosition.y+uHeight/2.0)/uHeight;\r\n      // 计算出混合颜色\r\n      vec3 gradMixColor = mix(distGradColor.xyz,uTopColor,gradMix);\r\n      gl_FragColor = vec4(gradMixColor,1);\r\n        //#end#\r\n\r\n      `\r\n  );\r\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,IAAI,MAAM,MAAM;AACvB,eAAe,SAASC,kBAAkBA,CAACC,IAAI,EAAE;EAC/CA,IAAI,CAACC,QAAQ,CAACC,eAAe,GAAIC,MAAM,IAAK;IAC1C;IACA;IACAA,MAAM,CAACC,cAAc,GAAGD,MAAM,CAACC,cAAc,CAACC,OAAO,CACnD,+BAA+B,EAC/B;AACN;AACA;AACA,KACI,CAAC;IACDC,YAAY,CAACH,MAAM,EAAEH,IAAI,CAAC;IAC1BO,SAAS,CAACJ,MAAM,CAAC;IACjBK,YAAY,CAACL,MAAM,CAAC;IACpBM,YAAY,CAACN,MAAM,CAAC;EACtB,CAAC;AACH;AAEA,OAAO,SAASG,YAAYA,CAACH,MAAM,EAAEH,IAAI,EAAE;EACzCA,IAAI,CAACU,QAAQ,CAACC,kBAAkB,CAAC,CAAC;EAClC;;EAEA,IAAI;IAAEC,GAAG;IAAEC;EAAI,CAAC,GAAGb,IAAI,CAACU,QAAQ,CAACI,WAAW;EAC5C;EACA,IAAIC,OAAO,GAAGF,GAAG,CAACG,CAAC,GAAGJ,GAAG,CAACI,CAAC;EAE3Bb,MAAM,CAACc,QAAQ,CAACC,SAAS,GAAG;IAC1BC,KAAK,EAAE,IAAItB,KAAK,CAACuB,KAAK,CAAC,SAAS;EAClC,CAAC;EACDjB,MAAM,CAACc,QAAQ,CAACF,OAAO,GAAG;IACxBI,KAAK,EAAEJ;EACT,CAAC;EAEDZ,MAAM,CAACkB,YAAY,GAAGlB,MAAM,CAACkB,YAAY,CAAChB,OAAO,CAC/C,mBAAmB,EACnB;AACJ;AACA;AACA,OACE,CAAC;EAEDF,MAAM,CAACkB,YAAY,GAAGlB,MAAM,CAACkB,YAAY,CAAChB,OAAO,CAC/C,yBAAyB,EACzB;AACJ;AACA;AACA,GACE,CAAC;EAEDF,MAAM,CAACC,cAAc,GAAGD,MAAM,CAACC,cAAc,CAACC,OAAO,CACnD,mBAAmB,EACnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,SACE,CAAC;EACDF,MAAM,CAACC,cAAc,GAAGD,MAAM,CAACC,cAAc,CAACC,OAAO,CACnD,SAAS,EACT;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OACE,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}