{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport * as THREE from \"three\";\nimport gsap from \"gsap\";\nimport vertex from \"@/shader/flyLine/vertex.glsl\";\nimport fragment from \"@/shader/flyLine/fragment.glsl\";\nexport default class FlyLineShader {\n  constructor() {\n    let FlyLinePoints = [new THREE.Vector3(0, 0, 0), new THREE.Vector3(-5, 4, 0), new THREE.Vector3(-10, 0, 0)];\n    //创建曲线\n    this.lineCurve = new THREE.CatmullRomCurve3(FlyLinePoints);\n    const points = this.lineCurve.getPoints(5000);\n    //创建集合顶点\n    this.geometry = new THREE.BufferGeometry().setFromPoints(points);\n    //给每一个顶点设置属性\n    const aSizeArray = new Float32Array(points.length);\n    for (let i = 0; i < aSizeArray.length; i++) {\n      aSizeArray[i] = i;\n    }\n    this.geometry.setAttribute(\"aSize\", new THREE.BufferAttribute(aSizeArray, 1));\n    const attributes = {\n      size: {\n        value: new Float32Array(points.length)\n      },\n      color: {\n        value: new Float32Array(points.length * 3)\n      }\n    };\n\n    //设置着色器材质\n    this.shaderMaterial = new THREE.ShaderMaterial({\n      vertexShader: vertex,\n      fragmentShader: fragment,\n      uniforms: {\n        uTime: {\n          value: 0\n        },\n        uColor: {\n          value: new THREE.Color(0xffff00)\n        },\n        uSize: {\n          value: 0.01\n        }\n      }\n    });\n    this.mesh = new THREE.Points(this.geometry, this.shaderMaterial);\n    gsap.to(this.shaderMaterial.uniforms.uTime, {\n      value: 1000,\n      duration: 1,\n      repeat: -1,\n      ease: \"none\"\n    });\n  }\n}","map":{"version":3,"names":["THREE","gsap","vertex","fragment","FlyLineShader","constructor","FlyLinePoints","Vector3","lineCurve","CatmullRomCurve3","points","getPoints","geometry","BufferGeometry","setFromPoints","aSizeArray","Float32Array","length","i","setAttribute","BufferAttribute","attributes","size","value","color","shaderMaterial","ShaderMaterial","vertexShader","fragmentShader","uniforms","uTime","uColor","Color","uSize","mesh","Points","to","duration","repeat","ease"],"sources":["E:/three.js/three.js-demo/three-city/city/src/three/mesh/FlyLineShader.js"],"sourcesContent":["import * as THREE from \"three\";\r\nimport gsap from \"gsap\";\r\nimport vertex from \"@/shader/flyLine/vertex.glsl\";\r\nimport fragment from \"@/shader/flyLine/fragment.glsl\";\r\n\r\nexport default class FlyLineShader {\r\n\r\n  constructor(){\r\n    let FlyLinePoints=[\r\n      new THREE.Vector3(0,0,0),\r\n      new THREE.Vector3(-5,4,0),\r\n      new THREE.Vector3(-10,0,0),\r\n    ];\r\n    //创建曲线\r\n    this.lineCurve=new THREE.CatmullRomCurve3(FlyLinePoints);\r\n    const points = this.lineCurve.getPoints(5000);\r\n    //创建集合顶点\r\n    this.geometry=new THREE.BufferGeometry().setFromPoints(points);\r\n    //给每一个顶点设置属性\r\n    const aSizeArray = new Float32Array(points.length);\r\n    for(let i=0;i<aSizeArray.length;i++){\r\n      aSizeArray[i]=i;\r\n    }\r\n    this.geometry.setAttribute(\"aSize\",new THREE.BufferAttribute(aSizeArray,1));\r\n    const attributes = {\r\n      size: {\r\n        value: new Float32Array(points.length)\r\n      },\r\n      color: {\r\n        value: new Float32Array(points.length * 3)\r\n      }\r\n    };\r\n\r\n    //设置着色器材质\r\n    this.shaderMaterial=new THREE.ShaderMaterial({\r\n      vertexShader:vertex,\r\n      fragmentShader:fragment,\r\n      uniforms:{\r\n        uTime:{\r\n          value:0\r\n        },\r\n        uColor:{\r\n          value:new THREE.Color(0xffff00)\r\n        },\r\n        uSize:{\r\n          value:0.01\r\n        }\r\n      }\r\n    });\r\n\r\n    this.mesh=new THREE.Points(this.geometry,this.shaderMaterial);\r\n    gsap.to(this.shaderMaterial.uniforms.uTime,{\r\n      value:1000,\r\n      duration:1,\r\n      repeat:-1,\r\n      ease:\"none\"\r\n    });\r\n  }\r\n  \r\n}"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,MAAM,MAAM,8BAA8B;AACjD,OAAOC,QAAQ,MAAM,gCAAgC;AAErD,eAAe,MAAMC,aAAa,CAAC;EAEjCC,WAAWA,CAAA,EAAE;IACX,IAAIC,aAAa,GAAC,CAChB,IAAIN,KAAK,CAACO,OAAO,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EACxB,IAAIP,KAAK,CAACO,OAAO,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EACzB,IAAIP,KAAK,CAACO,OAAO,CAAC,CAAC,EAAE,EAAC,CAAC,EAAC,CAAC,CAAC,CAC3B;IACD;IACA,IAAI,CAACC,SAAS,GAAC,IAAIR,KAAK,CAACS,gBAAgB,CAACH,aAAa,CAAC;IACxD,MAAMI,MAAM,GAAG,IAAI,CAACF,SAAS,CAACG,SAAS,CAAC,IAAI,CAAC;IAC7C;IACA,IAAI,CAACC,QAAQ,GAAC,IAAIZ,KAAK,CAACa,cAAc,CAAC,CAAC,CAACC,aAAa,CAACJ,MAAM,CAAC;IAC9D;IACA,MAAMK,UAAU,GAAG,IAAIC,YAAY,CAACN,MAAM,CAACO,MAAM,CAAC;IAClD,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACH,UAAU,CAACE,MAAM,EAACC,CAAC,EAAE,EAAC;MAClCH,UAAU,CAACG,CAAC,CAAC,GAACA,CAAC;IACjB;IACA,IAAI,CAACN,QAAQ,CAACO,YAAY,CAAC,OAAO,EAAC,IAAInB,KAAK,CAACoB,eAAe,CAACL,UAAU,EAAC,CAAC,CAAC,CAAC;IAC3E,MAAMM,UAAU,GAAG;MACjBC,IAAI,EAAE;QACJC,KAAK,EAAE,IAAIP,YAAY,CAACN,MAAM,CAACO,MAAM;MACvC,CAAC;MACDO,KAAK,EAAE;QACLD,KAAK,EAAE,IAAIP,YAAY,CAACN,MAAM,CAACO,MAAM,GAAG,CAAC;MAC3C;IACF,CAAC;;IAED;IACA,IAAI,CAACQ,cAAc,GAAC,IAAIzB,KAAK,CAAC0B,cAAc,CAAC;MAC3CC,YAAY,EAACzB,MAAM;MACnB0B,cAAc,EAACzB,QAAQ;MACvB0B,QAAQ,EAAC;QACPC,KAAK,EAAC;UACJP,KAAK,EAAC;QACR,CAAC;QACDQ,MAAM,EAAC;UACLR,KAAK,EAAC,IAAIvB,KAAK,CAACgC,KAAK,CAAC,QAAQ;QAChC,CAAC;QACDC,KAAK,EAAC;UACJV,KAAK,EAAC;QACR;MACF;IACF,CAAC,CAAC;IAEF,IAAI,CAACW,IAAI,GAAC,IAAIlC,KAAK,CAACmC,MAAM,CAAC,IAAI,CAACvB,QAAQ,EAAC,IAAI,CAACa,cAAc,CAAC;IAC7DxB,IAAI,CAACmC,EAAE,CAAC,IAAI,CAACX,cAAc,CAACI,QAAQ,CAACC,KAAK,EAAC;MACzCP,KAAK,EAAC,IAAI;MACVc,QAAQ,EAAC,CAAC;MACVC,MAAM,EAAC,CAAC,CAAC;MACTC,IAAI,EAAC;IACP,CAAC,CAAC;EACJ;AAEF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}