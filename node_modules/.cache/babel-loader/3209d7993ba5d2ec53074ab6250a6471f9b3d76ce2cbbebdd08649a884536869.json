{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { onMounted, ref, watch } from \"vue\";\nimport * as THREE from \"three\";\nimport gsap from \"gsap\";\n\n// 导入gui对象\nimport gui from \"@/three/gui\";\n// 导入场景\nimport scene from \"@/three/scene\";\n// 导入相机\nimport camera from \"@/three/camera\";\n// 导入控制器\nimport controls from \"@/three/controls\";\n// 导入辅助坐标轴\nimport axesHelper from \"@/three/axesHelper\";\n// 导入渲染器\nimport renderer from \"@/three/renderer\";\n// 初始化调整屏幕\nimport \"@/three/init\";\n// 导入添加物体函数\nimport createMesh from \"@/three/createMesh\";\n// 导入每一帧的执行函数\n//import animate from \"@/three/animate\";\nimport AlarmSprite from \"@/three/mesh/AlarmSprite\";\nimport LightWall from \"@/three/mesh/LightWall\";\nimport FlyLineShader from \"@/three/mesh/FlyLineShader\";\nimport LightRadar from \"@/three/mesh/LightRadar\";\nimport Sun from \"@/three/mesh/sun\";\nexport default {\n  __name: 'Scene',\n  props: [\"eventList\"],\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const props = __props;\n    // 场景元素div\n    let sceneDiv = ref(null);\n    // 添加相机\n    scene.add(camera);\n    // 添加辅助坐标轴\n    scene.add(axesHelper);\n\n    // 创建太阳实例并添加到场景中\n    const sun = new Sun({\n      x: 0,\n      y: 0,\n      z: 0\n    });\n    scene.add(sun.scene);\n    scene.add(sun.scene);\n    // 创建物体\n    // 渲染循环\n    function animate() {\n      requestAnimationFrame(animate);\n      controls.update();\n      const elapsedTime = clock.getElapsedTime();\n\n      // 更新太阳\n      sun.update(elapsedTime, renderer, camera);\n      renderer.render(scene, camera);\n    }\n    const clock = new THREE.Clock();\n    animate();\n    createMesh();\n    const eventListMesh = [];\n    let mapFn = {\n      火警: (position, i) => {\n        const lightWall = new LightWall(1, 2, position);\n        lightWall.eventListIndex = i;\n        scene.add(lightWall.mesh);\n        eventListMesh.push(lightWall);\n      },\n      治安: (position, i) => {\n        //   生成随机颜色\n        const color = new THREE.Color(Math.random(), Math.random(), Math.random()).getHex();\n        // 添加着色器飞线\n        const flyLineShader = new FlyLineShader(position, color);\n        flyLineShader.eventListIndex = i;\n        scene.add(flyLineShader.mesh);\n        eventListMesh.push(flyLineShader);\n      },\n      电力: (position, i) => {\n        // 添加雷达\n        const lightRadar = new LightRadar(2, position);\n        lightRadar.eventListIndex = i;\n        scene.add(lightRadar.mesh);\n        eventListMesh.push(lightRadar);\n      }\n    };\n    watch(() => props.eventList, val => {\n      //console.log(val);\n      eventListMesh.forEach(item => {\n        item.remove();\n      });\n      props.eventList.forEach((item, i) => {\n        const position = {\n          x: item.position.x / 5 - 10,\n          z: item.position.y / 5 - 10\n        };\n        const alarmSprite = new AlarmSprite(item.name, position);\n        eventListMesh.push(alarmSprite);\n        scene.add(alarmSprite.mesh);\n        console.log(item);\n        if (mapFn[item.name]) {\n          mapFn[item.name](position, i);\n        }\n      });\n    });\n    onMounted(() => {\n      sceneDiv.value.appendChild(renderer.domElement);\n      animate();\n    });\n    const __returned__ = {\n      props,\n      get sceneDiv() {\n        return sceneDiv;\n      },\n      set sceneDiv(v) {\n        sceneDiv = v;\n      },\n      sun,\n      animate,\n      clock,\n      eventListMesh,\n      get mapFn() {\n        return mapFn;\n      },\n      set mapFn(v) {\n        mapFn = v;\n      },\n      onMounted,\n      ref,\n      watch,\n      get THREE() {\n        return THREE;\n      },\n      get gsap() {\n        return gsap;\n      },\n      get gui() {\n        return gui;\n      },\n      get scene() {\n        return scene;\n      },\n      get camera() {\n        return camera;\n      },\n      get controls() {\n        return controls;\n      },\n      get axesHelper() {\n        return axesHelper;\n      },\n      get renderer() {\n        return renderer;\n      },\n      get createMesh() {\n        return createMesh;\n      },\n      get AlarmSprite() {\n        return AlarmSprite;\n      },\n      get LightWall() {\n        return LightWall;\n      },\n      get FlyLineShader() {\n        return FlyLineShader;\n      },\n      get LightRadar() {\n        return LightRadar;\n      },\n      get Sun() {\n        return Sun;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["onMounted","ref","watch","THREE","gsap","gui","scene","camera","controls","axesHelper","renderer","createMesh","AlarmSprite","LightWall","FlyLineShader","LightRadar","Sun","props","__props","sceneDiv","add","sun","x","y","z","animate","requestAnimationFrame","update","elapsedTime","clock","getElapsedTime","render","Clock","eventListMesh","mapFn","火警","position","i","lightWall","eventListIndex","mesh","push","治安","color","Color","Math","random","getHex","flyLineShader","电力","lightRadar","eventList","val","forEach","item","remove","alarmSprite","name","console","log","value","appendChild","domElement"],"sources":["E:/three.js/three.js-demo/three-city/city/src/components/Scene.vue"],"sourcesContent":["<template>\r\n  <div class=\"scene\" ref=\"sceneDiv\"></div>\r\n</template>\r\n\r\n<script setup>\r\nimport { onMounted, ref, watch } from \"vue\";\r\nimport * as THREE from \"three\";\r\nimport gsap from \"gsap\";\r\n\r\n// 导入gui对象\r\nimport gui from \"@/three/gui\";\r\n// 导入场景\r\nimport scene from \"@/three/scene\";\r\n// 导入相机\r\nimport camera from \"@/three/camera\";\r\n// 导入控制器\r\nimport controls from \"@/three/controls\";\r\n// 导入辅助坐标轴\r\nimport axesHelper from \"@/three/axesHelper\";\r\n// 导入渲染器\r\nimport renderer from \"@/three/renderer\";\r\n// 初始化调整屏幕\r\nimport \"@/three/init\";\r\n// 导入添加物体函数\r\nimport createMesh from \"@/three/createMesh\";\r\n// 导入每一帧的执行函数\r\n//import animate from \"@/three/animate\";\r\nimport  AlarmSprite from \"@/three/mesh/AlarmSprite\";\r\nimport LightWall from \"@/three/mesh/LightWall\";\r\nimport FlyLineShader from \"@/three/mesh/FlyLineShader\";\r\nimport LightRadar from \"@/three/mesh/LightRadar\";\r\nimport Sun from \"@/three/mesh/sun\";\r\n\r\nconst props = defineProps([\"eventList\"]);\r\n// 场景元素div\r\nlet sceneDiv = ref(null);\r\n// 添加相机\r\nscene.add(camera);\r\n// 添加辅助坐标轴\r\nscene.add(axesHelper);\r\n\r\n// 创建太阳实例并添加到场景中\r\nconst sun = new Sun({ x: 0, y: 0, z: 0 });\r\nscene.add(sun.scene);\r\n\r\nscene.add(sun.scene);\r\n// 创建物体\r\n// 渲染循环\r\nfunction animate() {\r\n  requestAnimationFrame(animate);\r\n\r\n  controls.update();\r\n\r\n  const elapsedTime = clock.getElapsedTime();\r\n\r\n  // 更新太阳\r\n  sun.update(elapsedTime, renderer, camera);\r\n\r\n  renderer.render(scene, camera);\r\n}\r\n\r\nconst clock = new THREE.Clock();\r\nanimate();\r\ncreateMesh();\r\nconst eventListMesh = [];\r\nlet mapFn = {\r\n  火警: (position, i) => {\r\n    const lightWall = new LightWall(1, 2, position);\r\n    lightWall.eventListIndex = i;\r\n    scene.add(lightWall.mesh);\r\n    eventListMesh.push(lightWall);\r\n  },\r\n  治安: (position, i) => {\r\n    //   生成随机颜色\r\n    const color = new THREE.Color(\r\n      Math.random(),\r\n      Math.random(),\r\n      Math.random()\r\n    ).getHex();\r\n    // 添加着色器飞线\r\n    const flyLineShader = new FlyLineShader(position, color);\r\n    flyLineShader.eventListIndex = i;\r\n    scene.add(flyLineShader.mesh);\r\n    eventListMesh.push(flyLineShader);\r\n  },\r\n  \r\n  电力: (position, i) => {\r\n    // 添加雷达\r\n    const lightRadar = new LightRadar(2, position);\r\n    lightRadar.eventListIndex = i;\r\n    scene.add(lightRadar.mesh);\r\n    eventListMesh.push(lightRadar);\r\n  },\r\n\r\n};\r\nwatch(\r\n  ()=>props.eventList,\r\n  (val)=>{\r\n    //console.log(val);\r\n    eventListMesh.forEach((item) => {\r\n      item.remove();\r\n    });\r\n    props.eventList.forEach((item,i)=>{\r\n      const position ={\r\n        x:item.position.x/5-10,\r\n        z:item.position.y/5-10,\r\n      } ;\r\n      const alarmSprite = new AlarmSprite(item.name,position);\r\n      eventListMesh.push(alarmSprite);\r\n      scene.add(alarmSprite.mesh);\r\n      console.log(item);\r\n      if (mapFn[item.name]) {\r\n        mapFn[item.name](position, i);\r\n      }\r\n    });\r\n  }\r\n);\r\n\r\nonMounted(() => {\r\n  sceneDiv.value.appendChild(renderer.domElement);\r\n  animate();\r\n});\r\n\r\n\r\n\r\n\r\n\r\n</script>\r\n\r\n<style >\r\n.scene {\r\n  width: 100vw;\r\n  height: 100vh;\r\n  position: fixed;\r\n  z-index: 100;\r\n  left: 0;\r\n  top: 0;\r\n}\r\n\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}