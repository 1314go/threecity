{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"scene\",\n  ref: \"sceneDiv\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1"],"sources":["E:\\three.js\\three.js-demo\\three-city\\city\\src\\components\\Scene.vue"],"sourcesContent":["<template>\r\n  <div class=\"scene\" ref=\"sceneDiv\"></div>\r\n</template>\r\n\r\n<script setup>\r\nimport { onMounted, ref, watch } from \"vue\";\r\nimport * as THREE from \"three\";\r\nimport gsap from \"gsap\";\r\n\r\n// 导入gui对象\r\nimport gui from \"@/three/gui\";\r\n// 导入场景\r\nimport scene from \"@/three/scene\";\r\n// 导入相机\r\nimport camera from \"@/three/camera\";\r\n// 导入控制器\r\nimport controls from \"@/three/controls\";\r\n// 导入辅助坐标轴\r\nimport axesHelper from \"@/three/axesHelper\";\r\n// 导入渲染器\r\nimport renderer from \"@/three/renderer\";\r\n// 初始化调整屏幕\r\nimport \"@/three/init\";\r\n// 导入添加物体函数\r\nimport createMesh from \"@/three/createMesh\";\r\n// 导入每一帧的执行函数\r\nimport animate from \"@/three/animate\";\r\nimport  AlarmSprite from \"@/three/mesh/AlarmSprite\";\r\nimport LightWall from \"@/three/mesh/LightWall\";\r\nimport FlyLineShader from \"@/three/mesh/FlyLineShader\";\r\nimport LightRadar from \"@/three/mesh/LightRadar\";\r\nimport Sun from \"@/three/mesh/sun\";\r\nimport sky from \"@/three/mesh/sky\";\r\nimport eventHub from \"@/utils/eventHub\";\r\nconst props = defineProps([\"eventList\"]);\r\n// 场景元素div\r\nlet sceneDiv = ref(null);\r\n// 添加相机\r\nscene.add(camera);\r\n// 添加辅助坐标轴\r\nscene.add(axesHelper);\r\n\r\nconst skyController = new sky(scene, camera, renderer);\r\nscene.add(skyController.sky);\r\n// 创建太阳实例并添加到场景中\r\n// const sun = new Sun({ x: 0, y: 0, z: 0 });\r\n// scene.add(sun.scene);\r\n\r\n// scene.add(sun.scene);\r\n// 创建物体\r\n\r\n\r\nconst clock = new THREE.Clock();\r\nanimate();\r\ncreateMesh();\r\nconst eventListMesh = [];\r\nlet mapFn = {\r\n  火警: (position, i) => {\r\n    const lightWall = new LightWall(1, 2, position);\r\n    lightWall.eventListIndex = i;\r\n    scene.add(lightWall.mesh);\r\n    eventListMesh.push(lightWall);\r\n  },\r\n  治安: (position, i) => {\r\n    //   生成随机颜色\r\n    const color = new THREE.Color(\r\n      Math.random(),\r\n      Math.random(),\r\n      Math.random()\r\n    ).getHex();\r\n    // 添加着色器飞线\r\n    const flyLineShader = new FlyLineShader(position, color);\r\n    flyLineShader.eventListIndex = i;\r\n    scene.add(flyLineShader.mesh);\r\n    eventListMesh.push(flyLineShader);\r\n  },\r\n  \r\n  电力: (position, i) => {\r\n    // 添加雷达\r\n    const lightRadar = new LightRadar(2, position);\r\n    lightRadar.eventListIndex = i;\r\n    scene.add(lightRadar.mesh);\r\n    eventListMesh.push(lightRadar);\r\n  },\r\n\r\n};\r\neventHub.on(\"toggleEvent\",(i)=>{\r\n  eventListMesh.forEach((item)=>{\r\n    if(item.eventListIndex===i){\r\n       item.mesh.visible=true; \r\n    }else{\r\n        item.mesh.visible=false;\r\n    }\r\n  })\r\n});\r\nwatch(\r\n  ()=>props.eventList,\r\n  (val)=>{\r\n    //console.log(val);\r\n    eventListMesh.forEach((item) => {\r\n      item.remove();\r\n    });\r\n    props.eventList.forEach((item,i)=>{\r\n      const position ={\r\n        x:item.position.x/5-10,\r\n        z:item.position.y/5-10,\r\n      } ;\r\n      const alarmSprite = new AlarmSprite(item.name,position);\r\n      alarmSprite.onClick(()=>{\r\n        //console.log(item.name,i);\r\n        eventHub.emit(\"spriteClik\",{event:item,i});\r\n\r\n      });\r\n      alarmSprite.eventListIndex=i;\r\n      eventListMesh.push(alarmSprite);\r\n      scene.add(alarmSprite.mesh);\r\n      console.log(item);\r\n      if (mapFn[item.name]) {\r\n        mapFn[item.name](position, i);\r\n      }\r\n    });\r\n  }\r\n);\r\n\r\nonMounted(() => {\r\n  sceneDiv.value.appendChild(renderer.domElement);\r\n  animate();\r\n});\r\n\r\n\r\n\r\n\r\n\r\n</script>\r\n\r\n<style >\r\n.scene {\r\n  width: 100vw;\r\n  height: 100vh;\r\n  position: fixed;\r\n  z-index: 100;\r\n  left: 0;\r\n  top: 0;\r\n}\r\n\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC,OAAO;EAACC,GAAG,EAAC;;;uBAAvBC,mBAAA,CAAwC,OAAxCC,UAAwC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}