{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport * as THREE from \"three\";\nimport gsap from \"gsap\";\nimport vertex from \"@/shader/flyLine/vertex.glsl\";\nimport fragment from \"@/shader/flyLine/fragment.glsl\";\nexport default class FlyLineShader {\n  constructor(position = {\n    x: 0,\n    z: 0\n  }, Color = 0x00FFFF, linewidth = 0.2) {\n    let FlyLinePoints = [new THREE.Vector3(0, 0, 0), new THREE.Vector3(position.x / 2, 4, position.z / 2), new THREE.Vector3(position.x, 0, position.z)];\n    //创建曲线\n    this.lineCurve = new THREE.CatmullRomCurve3(FlyLinePoints);\n    const points = this.lineCurve.getPoints(1000);\n    //创建集合顶点\n    this.geometry = new THREE.BufferGeometry().setFromPoints(points);\n    //给每一个顶点设置属性\n    const aSizeArray = new Float32Array(points.length);\n    for (let i = 0; i < aSizeArray.length; i++) {\n      aSizeArray[i] = i;\n    }\n    this.geometry.setAttribute(\"aSize\", new THREE.BufferAttribute(aSizeArray, 1));\n\n    //设置着色器材质\n    this.shaderMaterial = new THREE.ShaderMaterial({\n      vertexShader: vertex,\n      fragmentShader: fragment,\n      transparent: true,\n      blending: THREE.AdditiveBlending,\n      uniforms: {\n        uTime: {\n          value: 0\n        },\n        uColor: {\n          value: new THREE.Color(color)\n        },\n        uLength: {\n          value: points.length\n        },\n        uSize: {\n          value: 0.01\n        }\n      }\n    });\n    this.mesh = new THREE.Points(this.geometry, this.shaderMaterial);\n    gsap.to(this.shaderMaterial.uniforms.uTime, {\n      value: 1000,\n      duration: 1,\n      repeat: -1,\n      ease: \"none\"\n    });\n  }\n}","map":{"version":3,"names":["THREE","gsap","vertex","fragment","FlyLineShader","constructor","position","x","z","Color","linewidth","FlyLinePoints","Vector3","lineCurve","CatmullRomCurve3","points","getPoints","geometry","BufferGeometry","setFromPoints","aSizeArray","Float32Array","length","i","setAttribute","BufferAttribute","shaderMaterial","ShaderMaterial","vertexShader","fragmentShader","transparent","blending","AdditiveBlending","uniforms","uTime","value","uColor","color","uLength","uSize","mesh","Points","to","duration","repeat","ease"],"sources":["E:/three.js/three.js-demo/three-city/city/src/three/mesh/FlyLineShader.js"],"sourcesContent":["import * as THREE from \"three\";\r\nimport gsap from \"gsap\";\r\nimport vertex from \"@/shader/flyLine/vertex.glsl\";\r\nimport fragment from \"@/shader/flyLine/fragment.glsl\";\r\n\r\nexport default class FlyLineShader {\r\n\r\n  constructor(position={x:0,z:0},Color=0x00FFFF,linewidth=0.2){\r\n    let FlyLinePoints=[\r\n      new THREE.Vector3(0,0,0),\r\n      new THREE.Vector3(position.x/2,4,position.z/2),\r\n      new THREE.Vector3(position.x,0,position.z),\r\n    ];\r\n    //创建曲线\r\n    this.lineCurve=new THREE.CatmullRomCurve3(FlyLinePoints);\r\n    const points = this.lineCurve.getPoints(1000);\r\n    //创建集合顶点\r\n    this.geometry=new THREE.BufferGeometry().setFromPoints(points);\r\n    //给每一个顶点设置属性\r\n    const aSizeArray = new Float32Array(points.length);\r\n    for(let i=0;i<aSizeArray.length;i++){\r\n      aSizeArray[i]=i;\r\n    }\r\n    this.geometry.setAttribute(\"aSize\",new THREE.BufferAttribute(aSizeArray,1));\r\n   \r\n\r\n    //设置着色器材质\r\n    this.shaderMaterial=new THREE.ShaderMaterial({\r\n      vertexShader:vertex,\r\n      fragmentShader:fragment,\r\n      transparent:true,\r\n      blending:THREE.AdditiveBlending,\r\n      uniforms:{\r\n        uTime:{\r\n          value:0\r\n        },\r\n        uColor:{\r\n          value:new THREE.Color(color)\r\n        },\r\n        uLength:{\r\n          value:points.length,\r\n        },\r\n        uSize:{\r\n          value:0.01\r\n        }\r\n      }\r\n    });\r\n\r\n    this.mesh=new THREE.Points(this.geometry,this.shaderMaterial);\r\n    gsap.to(this.shaderMaterial.uniforms.uTime,{\r\n      value:1000,\r\n      duration:1,\r\n      repeat:-1,\r\n      ease:\"none\"\r\n    });\r\n  }\r\n  \r\n}"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,MAAM,MAAM,8BAA8B;AACjD,OAAOC,QAAQ,MAAM,gCAAgC;AAErD,eAAe,MAAMC,aAAa,CAAC;EAEjCC,WAAWA,CAACC,QAAQ,GAAC;IAACC,CAAC,EAAC,CAAC;IAACC,CAAC,EAAC;EAAC,CAAC,EAACC,KAAK,GAAC,QAAQ,EAACC,SAAS,GAAC,GAAG,EAAC;IAC1D,IAAIC,aAAa,GAAC,CAChB,IAAIX,KAAK,CAACY,OAAO,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EACxB,IAAIZ,KAAK,CAACY,OAAO,CAACN,QAAQ,CAACC,CAAC,GAAC,CAAC,EAAC,CAAC,EAACD,QAAQ,CAACE,CAAC,GAAC,CAAC,CAAC,EAC9C,IAAIR,KAAK,CAACY,OAAO,CAACN,QAAQ,CAACC,CAAC,EAAC,CAAC,EAACD,QAAQ,CAACE,CAAC,CAAC,CAC3C;IACD;IACA,IAAI,CAACK,SAAS,GAAC,IAAIb,KAAK,CAACc,gBAAgB,CAACH,aAAa,CAAC;IACxD,MAAMI,MAAM,GAAG,IAAI,CAACF,SAAS,CAACG,SAAS,CAAC,IAAI,CAAC;IAC7C;IACA,IAAI,CAACC,QAAQ,GAAC,IAAIjB,KAAK,CAACkB,cAAc,CAAC,CAAC,CAACC,aAAa,CAACJ,MAAM,CAAC;IAC9D;IACA,MAAMK,UAAU,GAAG,IAAIC,YAAY,CAACN,MAAM,CAACO,MAAM,CAAC;IAClD,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACH,UAAU,CAACE,MAAM,EAACC,CAAC,EAAE,EAAC;MAClCH,UAAU,CAACG,CAAC,CAAC,GAACA,CAAC;IACjB;IACA,IAAI,CAACN,QAAQ,CAACO,YAAY,CAAC,OAAO,EAAC,IAAIxB,KAAK,CAACyB,eAAe,CAACL,UAAU,EAAC,CAAC,CAAC,CAAC;;IAG3E;IACA,IAAI,CAACM,cAAc,GAAC,IAAI1B,KAAK,CAAC2B,cAAc,CAAC;MAC3CC,YAAY,EAAC1B,MAAM;MACnB2B,cAAc,EAAC1B,QAAQ;MACvB2B,WAAW,EAAC,IAAI;MAChBC,QAAQ,EAAC/B,KAAK,CAACgC,gBAAgB;MAC/BC,QAAQ,EAAC;QACPC,KAAK,EAAC;UACJC,KAAK,EAAC;QACR,CAAC;QACDC,MAAM,EAAC;UACLD,KAAK,EAAC,IAAInC,KAAK,CAACS,KAAK,CAAC4B,KAAK;QAC7B,CAAC;QACDC,OAAO,EAAC;UACNH,KAAK,EAACpB,MAAM,CAACO;QACf,CAAC;QACDiB,KAAK,EAAC;UACJJ,KAAK,EAAC;QACR;MACF;IACF,CAAC,CAAC;IAEF,IAAI,CAACK,IAAI,GAAC,IAAIxC,KAAK,CAACyC,MAAM,CAAC,IAAI,CAACxB,QAAQ,EAAC,IAAI,CAACS,cAAc,CAAC;IAC7DzB,IAAI,CAACyC,EAAE,CAAC,IAAI,CAAChB,cAAc,CAACO,QAAQ,CAACC,KAAK,EAAC;MACzCC,KAAK,EAAC,IAAI;MACVQ,QAAQ,EAAC,CAAC;MACVC,MAAM,EAAC,CAAC,CAAC;MACTC,IAAI,EAAC;IACP,CAAC,CAAC;EACJ;AAEF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}