{"ast":null,"code":"import { createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"home\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode($setup[\"Scene\"], {\n    eventList: $setup.eventList\n  }, null, 8 /* PROPS */, [\"eventList\"]), _createVNode($setup[\"BigScreen\"], {\n    dataInfo: $setup.dataInfo,\n    eventList: $setup.eventList\n  }, null, 8 /* PROPS */, [\"dataInfo\", \"eventList\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","$setup","eventList","dataInfo"],"sources":["E:\\three.js\\three.js-demo\\three-city\\city\\src\\views\\HomeView.vue"],"sourcesContent":["<template>\n  <div class=\"home\">\n <Scene :eventList=\"eventList\"></Scene>\n <BigScreen :dataInfo=\"dataInfo\" :eventList=\"eventList\"></BigScreen>\n  </div>\n</template>\n\n<script setup>\n// @ is an alias to /src\nimport { getSmartCityInfo, getSmartCityList } from \"@/api/api\";\nimport BigScreen from '@/components/BigScreen.vue';\nimport Scene from '@/components/Scene.vue'\n\nimport gsap from 'gsap';\n\nimport { onMounted, reactive, ref,watch } from \"vue\";\nconst dataInfo = reactive({\n    iot:{number:0},\n    event:{number:0},\n    power:{number:0},\n    test:{number:0},\n\n});\nonMounted(async ()=>{\n  changeInfo();\n  getEventList();\n  setInterval(()=>{\n    changeInfo();\n    getEventList();\n  },5000);\n});\nconst changeInfo=async ()=>{\n  let res = await getSmartCityInfo();\n  // dataInfo.iot = res.data.data.iot; \n  // dataInfo.event = res.data.data.event;\n  // dataInfo.power = res.data.data.power;\n  // dataInfo.test = res.data.data.test;\n  // dataInfo.iot={name:res.data.data.iot.name,unit:res.data.data.iot.unit};\n  // gsap.to(dataInfo.iot,{\n  //   number:res.data.data.iot.number,\n  //   duration:1,\n  // });\n  // gsap.to(dataInfo.event,{\n  //   number:res.data.data.event.number,\n  //   duration:1,\n  // });\n  // gsap.to(dataInfo.power,{\n  //   number:res.data.data.power.number,\n  //   duration:1,\n  // });\n  // gsap.to(dataInfo.test,{\n  //   number:res.data.data.test.number,\n  //   duration:1,\n  // });\n  for (let key in dataInfo) {\n    dataInfo[key].name = res.data.data[key].name;\n    dataInfo[key].unit = res.data.data[key].unit;\n    gsap.to(dataInfo[key], {\n      number: res.data.data[key].number,\n      duration: 1,\n\n      \n    });\n  }\n};\nconst eventList = ref([]);\nconst getEventList = async () => {\n  let result = await getSmartCityList();\n  eventList.value = result.data.list;\n   console.log(result.data.list);\n};\n</script>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAM;;uBAAjBC,mBAAA,CAGM,OAHNC,UAGM,GAFPC,YAAA,CAAsCC,MAAA;IAA9BC,SAAS,EAAED,MAAA,CAAAC;EAAS,wCAC5BF,YAAA,CAAmEC,MAAA;IAAvDE,QAAQ,EAAEF,MAAA,CAAAE,QAAQ;IAAGD,SAAS,EAAED,MAAA,CAAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}