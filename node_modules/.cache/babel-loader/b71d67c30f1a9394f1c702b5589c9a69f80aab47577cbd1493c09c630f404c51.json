{"ast":null,"code":"import { onMounted, ref, watch } from \"vue\";\nimport * as THREE from \"three\";\nimport gsap from \"gsap\";\n\n// 导入gui对象\nimport gui from \"@/three/gui\";\n// 导入场景\nimport scene from \"@/three/scene\";\n// 导入相机\nimport camera from \"@/three/camera\";\n// 导入控制器\nimport controls from \"@/three/controls\";\n// 导入辅助坐标轴\nimport axesHelper from \"@/three/axesHelper\";\n// 导入渲染器\nimport renderer from \"@/three/renderer\";\n// 初始化调整屏幕\nimport \"@/three/init\";\n// 导入添加物体函数\nimport createMesh from \"@/three/createMesh\";\n// 导入每一帧的执行函数\nimport animate from \"@/three/animate\";\nimport AlarmSprite from \"@/three/mesh/AlarmSprite\";\nimport LightWall from \"@/three/mesh/LightWall\";\nimport FlyLineShader from \"@/three/mesh/FlyLineShader\";\nimport LightRadar from \"@/three/mesh/LightRadar\";\nimport eventHub from \"@/utils/eventHub\";\n\n//场景元素div\n\nexport default {\n  __name: 'Scene',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    let sceneDiv = ref(null);\n\n    // console.log(THREE);\n    // 初始化场景\n\n    // 创建透视相机\n\n    // 设置相机位置\n    // object3d具有position，属性是1个3维的向量\n    camera.position.set(0, 0, 10);\n    scene.add(camera);\n\n    // 加入辅助轴，帮助我们查看3维坐标轴\n\n    scene.add(axesHelper);\n    const plane = new THREE.Mesh(new THREE.PlaneBufferGeometry(20, 20), new THREE.MeshStandardMaterial());\n    plane.position.set(0, 0, -6);\n    plane.receiveShadow = true;\n    scene.add(plane);\n\n    // 初始化渲染器\n\n    // 设置渲染尺寸大小\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n\n    // 监听屏幕大小改变的变化，设置渲染的尺寸\n    window.addEventListener(\"resize\", () => {\n      //   console.log(\"resize\");\n      // 更新摄像头\n      camera.aspect = window.innerWidth / window.innerHeight;\n      //   更新摄像机的投影矩阵\n      camera.updateProjectionMatrix();\n\n      //   更新渲染器\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      //   设置渲染器的像素比例\n      renderer.setPixelRatio(window.devicePixelRatio);\n    });\n    onMounted(() => {\n      console.log(sceneDiv.value);\n    });\n    const __returned__ = {\n      get sceneDiv() {\n        return sceneDiv;\n      },\n      set sceneDiv(v) {\n        sceneDiv = v;\n      },\n      plane,\n      onMounted,\n      ref,\n      watch,\n      get THREE() {\n        return THREE;\n      },\n      get gsap() {\n        return gsap;\n      },\n      get gui() {\n        return gui;\n      },\n      get scene() {\n        return scene;\n      },\n      get camera() {\n        return camera;\n      },\n      get controls() {\n        return controls;\n      },\n      get axesHelper() {\n        return axesHelper;\n      },\n      get renderer() {\n        return renderer;\n      },\n      get createMesh() {\n        return createMesh;\n      },\n      get animate() {\n        return animate;\n      },\n      get AlarmSprite() {\n        return AlarmSprite;\n      },\n      get LightWall() {\n        return LightWall;\n      },\n      get FlyLineShader() {\n        return FlyLineShader;\n      },\n      get LightRadar() {\n        return LightRadar;\n      },\n      get eventHub() {\n        return eventHub;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["onMounted","ref","watch","THREE","gsap","gui","scene","camera","controls","axesHelper","renderer","createMesh","animate","AlarmSprite","LightWall","FlyLineShader","LightRadar","eventHub","sceneDiv","position","set","add","plane","Mesh","PlaneBufferGeometry","MeshStandardMaterial","receiveShadow","setSize","window","innerWidth","innerHeight","shadowMap","enabled","addEventListener","aspect","updateProjectionMatrix","setPixelRatio","devicePixelRatio","console","log","value"],"sources":["E:/three.js/three.js-demo/three-city/city/src/components/Scene.vue"],"sourcesContent":["<template>\r\n  <div class=\"scene\" ref=\"sceneDiv\"></div>\r\n</template>\r\n\r\n<script setup>import { onMounted, ref, watch } from \"vue\";\r\nimport * as THREE from \"three\";\r\nimport gsap from \"gsap\";\r\n\r\n// 导入gui对象\r\nimport gui from \"@/three/gui\";\r\n// 导入场景\r\nimport scene from \"@/three/scene\";\r\n// 导入相机\r\nimport camera from \"@/three/camera\";\r\n// 导入控制器\r\nimport controls from \"@/three/controls\";\r\n// 导入辅助坐标轴\r\nimport axesHelper from \"@/three/axesHelper\";\r\n// 导入渲染器\r\nimport renderer from \"@/three/renderer\";\r\n// 初始化调整屏幕\r\nimport \"@/three/init\";\r\n// 导入添加物体函数\r\nimport createMesh from \"@/three/createMesh\";\r\n// 导入每一帧的执行函数\r\nimport animate from \"@/three/animate\";\r\nimport AlarmSprite from \"@/three/mesh/AlarmSprite\";\r\nimport LightWall from \"@/three/mesh/LightWall\";\r\nimport FlyLineShader from \"@/three/mesh/FlyLineShader\";\r\nimport LightRadar from \"@/three/mesh/LightRadar\";\r\nimport eventHub from \"@/utils/eventHub\";\r\n\r\n//场景元素div\r\nlet sceneDiv=ref(null);\r\n\r\n\r\n\r\n// console.log(THREE);\r\n// 初始化场景\r\n\r\n\r\n// 创建透视相机\r\n\r\n// 设置相机位置\r\n// object3d具有position，属性是1个3维的向量\r\ncamera.position.set(0, 0, 10);\r\nscene.add(camera);\r\n\r\n// 加入辅助轴，帮助我们查看3维坐标轴\r\n\r\nscene.add(axesHelper);\r\n\r\nconst plane = new THREE.Mesh(\r\n  new THREE.PlaneBufferGeometry(20, 20),\r\n  new THREE.MeshStandardMaterial()\r\n);\r\nplane.position.set(0, 0, -6);\r\nplane.receiveShadow = true;\r\nscene.add(plane);\r\n\r\n// 初始化渲染器\r\n\r\n// 设置渲染尺寸大小\r\nrenderer.setSize(window.innerWidth, window.innerHeight);\r\nrenderer.shadowMap.enabled = true;\r\n\r\n// 监听屏幕大小改变的变化，设置渲染的尺寸\r\nwindow.addEventListener(\"resize\", () => {\r\n  //   console.log(\"resize\");\r\n  // 更新摄像头\r\n  camera.aspect = window.innerWidth / window.innerHeight;\r\n  //   更新摄像机的投影矩阵\r\n  camera.updateProjectionMatrix();\r\n\r\n  //   更新渲染器\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n  //   设置渲染器的像素比例\r\n  renderer.setPixelRatio(window.devicePixelRatio);\r\n});\r\nonMounted(()=>{\r\n  console.log(sceneDiv.value)\r\n})\r\n</script>\r\n\r\n<style >\r\n.scene{\r\n  width: 100vw;\r\n  height: 100vw;\r\n  position:absolute;\r\n  z-index: 100;\r\n  left: 0;\r\n  top:0;\r\n}\r\n\r\n</style>"],"mappings":"AAIc,SAASA,SAAS,EAAEC,GAAG,EAAEC,KAAK,QAAQ,KAAK;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,IAAI,MAAM,MAAM;;AAEvB;AACA,OAAOC,GAAG,MAAM,aAAa;AAC7B;AACA,OAAOC,KAAK,MAAM,eAAe;AACjC;AACA,OAAOC,MAAM,MAAM,gBAAgB;AACnC;AACA,OAAOC,QAAQ,MAAM,kBAAkB;AACvC;AACA,OAAOC,UAAU,MAAM,oBAAoB;AAC3C;AACA,OAAOC,QAAQ,MAAM,kBAAkB;AACvC;AACA,OAAO,cAAc;AACrB;AACA,OAAOC,UAAU,MAAM,oBAAoB;AAC3C;AACA,OAAOC,OAAO,MAAM,iBAAiB;AACrC,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,QAAQ,MAAM,kBAAkB;;AAEvC;;;;;;;;IACA,IAAIC,QAAQ,GAACjB,GAAG,CAAC,IAAI,CAAC;;IAItB;IACA;;IAGA;;IAEA;IACA;IACAM,MAAM,CAACY,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;IAC7Bd,KAAK,CAACe,GAAG,CAACd,MAAM,CAAC;;IAEjB;;IAEAD,KAAK,CAACe,GAAG,CAACZ,UAAU,CAAC;IAErB,MAAMa,KAAK,GAAG,IAAInB,KAAK,CAACoB,IAAI,CAC1B,IAAIpB,KAAK,CAACqB,mBAAmB,CAAC,EAAE,EAAE,EAAE,CAAC,EACrC,IAAIrB,KAAK,CAACsB,oBAAoB,CAAC,CACjC,CAAC;IACDH,KAAK,CAACH,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5BE,KAAK,CAACI,aAAa,GAAG,IAAI;IAC1BpB,KAAK,CAACe,GAAG,CAACC,KAAK,CAAC;;IAEhB;;IAEA;IACAZ,QAAQ,CAACiB,OAAO,CAACC,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACvDpB,QAAQ,CAACqB,SAAS,CAACC,OAAO,GAAG,IAAI;;IAEjC;IACAJ,MAAM,CAACK,gBAAgB,CAAC,QAAQ,EAAE,MAAM;MACtC;MACA;MACA1B,MAAM,CAAC2B,MAAM,GAAGN,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW;MACtD;MACAvB,MAAM,CAAC4B,sBAAsB,CAAC,CAAC;;MAE/B;MACAzB,QAAQ,CAACiB,OAAO,CAACC,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;MACvD;MACApB,QAAQ,CAAC0B,aAAa,CAACR,MAAM,CAACS,gBAAgB,CAAC;IACjD,CAAC,CAAC;IACFrC,SAAS,CAAC,MAAI;MACZsC,OAAO,CAACC,GAAG,CAACrB,QAAQ,CAACsB,KAAK,CAAC;IAC7B,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}