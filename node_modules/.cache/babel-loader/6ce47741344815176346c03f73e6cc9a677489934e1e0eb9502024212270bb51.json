{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { number } from \"echarts\";\nimport * as THREE from \"three\";\nimport gsap from \"gsap\";\n\n// 第一种实现方式\nexport class Clouds {\n  // height设置云朵的高度，num设置云朵的数量\n  constructor(height = 10, num = 300, size = 15, scale = 10, autoRotate = true) {\n    let textureLoader = new THREE.TextureLoader();\n    const map1 = textureLoader.load(\"./textures/cloud/cloud1.jfif\");\n    const map2 = textureLoader.load(\"./textures/cloud/cloud2.jfif\");\n    const map3 = textureLoader.load(\"./textures/cloud/cloud3.jpg\");\n    let material1 = new THREE.SpriteMaterial({\n      map: map2,\n      color: 0xffffff,\n      alphaMap: map1,\n      transparent: true,\n      blending: THREE.AdditiveBlending,\n      depthWrite: false,\n      depthTest: false\n    });\n    let material2 = new THREE.SpriteMaterial({\n      map: map3,\n      color: 0xffffff,\n      alphaMap: map2,\n      transparent: true,\n      blending: THREE.AdditiveBlending,\n      depthWrite: false,\n      depthTest: false\n    });\n    let material3 = new THREE.SpriteMaterial({\n      map: map1,\n      color: 0xffffff,\n      alphaMap: map3,\n      transparent: true,\n      blending: THREE.AdditiveBlending,\n      depthWrite: false,\n      depthTest: false\n    });\n    this.materials = [material1, material2, material3];\n    this.mesh = new THREE.Group();\n    for (let i = 0; i < num; i++) {\n      let index = Math.floor(Math.random() * 3);\n      let material = this.materials[index];\n      let sprite = new THREE.Sprite(material);\n      // 随机设置精灵的大小\n      let randomSize = Math.random() * size;\n      sprite.scale.set(randomSize, randomSize, randomSize);\n      // 随机设置精灵的位置\n      let randomX = (Math.random() - 0.5) * 2 * scale;\n      let randomY = Math.random() * (height / 2) + height;\n      let randomZ = (Math.random() - 0.5) * 2 * scale;\n      sprite.position.set(randomX, randomY, randomZ);\n      this.mesh.add(sprite);\n    }\n    if (autoRotate) {\n      this.animate();\n    }\n  }\n  animate() {\n    gsap.to(this.mesh.rotation, {\n      duration: 120,\n      repeat: -1,\n      y: Math.PI * 2\n    });\n  }\n}\nexport class CloudsPlus {\n  // height设置云朵的高度，num设置云朵的数量\n  constructor(height = 20, num = 100, size = 400, scale = 100, autoRotate = true) {\n    this.height = height;\n    this.num = num;\n    this.size = size;\n    this.scale = scale;\n    this.autoRotate = autoRotate;\n    let textureLoader = new THREE.TextureLoader();\n    const map1 = textureLoader.load(\"./textures/cloud/cloud1.jfif\");\n    const map2 = textureLoader.load(\"./textures/cloud/cloud2.jfif\");\n    const map3 = textureLoader.load(\"./textures/cloud/cloud3.jpg\");\n    let materials = [];\n    let material1 = new THREE.PointsMaterial({\n      map: map1,\n      color: 0xffffff,\n      alphaMap: map2,\n      transparent: true,\n      blending: THREE.AdditiveBlending,\n      depthWrite: false,\n      depthTest: false,\n      size: 0.2 * size\n    });\n    let material2 = new THREE.PointsMaterial({\n      map: map2,\n      color: 0xffffff,\n      alphaMap: map3,\n      transparent: true,\n      blending: THREE.AdditiveBlending,\n      depthWrite: false,\n      depthTest: false,\n      size: 0.5 * size\n    });\n    let material3 = new THREE.PointsMaterial({\n      map: map3,\n      color: 0xffffff,\n      alphaMap: map1,\n      transparent: true,\n      blending: THREE.AdditiveBlending,\n      depthWrite: false,\n      depthTest: false,\n      size: 0.8 * size\n    });\n    let material4 = new THREE.PointsMaterial({\n      map: map2,\n      color: 0xffffff,\n      alphaMap: map1,\n      transparent: true,\n      blending: THREE.AdditiveBlending,\n      depthWrite: false,\n      depthTest: false,\n      size: 1 * size\n    });\n    materials.push(material1, material2, material3, material4);\n    this.mesh = new THREE.Group();\n    for (let i = 0; i < materials.length; i++) {\n      let material = materials[i];\n      let geometry = this.generateGeometry(this.num);\n      let points = new THREE.Points(geometry, material);\n      this.mesh.add(points);\n    }\n    if (autoRotate) {\n      this.animate();\n    }\n  }\n  generateGeometry(num = 300) {\n    const vertices = [];\n    // 创建点位置\n    for (let i = 0; i < num; i++) {\n      // 随机设置精灵的位置\n      let randomX = (Math.random() - 0.5) * 2 * this.scale;\n      let randomY = Math.random() * (this.height / 2) + this.height;\n      let randomZ = (Math.random() - 0.5) * 2 * this.scale;\n      vertices.push(randomX, randomY, randomZ);\n    }\n    const geometry = new THREE.BufferGeometry();\n    geometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(vertices, 3));\n    return geometry;\n  }\n  animate() {\n    let i = 1;\n    this.mesh.traverse(item => {\n      let speed = 40 * i;\n      if (item instanceof THREE.Points) {\n        // console.log(speed);\n        gsap.to(item.rotation, {\n          duration: speed,\n          repeat: -1,\n          y: Math.PI * 2\n        });\n      }\n      i++;\n    });\n  }\n}","map":{"version":3,"names":["number","THREE","gsap","Clouds","constructor","height","num","size","scale","autoRotate","textureLoader","TextureLoader","map1","load","map2","map3","material1","SpriteMaterial","map","color","alphaMap","transparent","blending","AdditiveBlending","depthWrite","depthTest","material2","material3","materials","mesh","Group","i","index","Math","floor","random","material","sprite","Sprite","randomSize","set","randomX","randomY","randomZ","position","add","animate","to","rotation","duration","repeat","y","PI","CloudsPlus","PointsMaterial","material4","push","length","geometry","generateGeometry","points","Points","vertices","BufferGeometry","setAttribute","Float32BufferAttribute","traverse","item","speed"],"sources":["E:/three.js/three.js-demo/three-city/city/src/three/mesh/Clouds.js"],"sourcesContent":["import { number } from \"echarts\";\r\nimport * as THREE from \"three\";\r\nimport gsap from \"gsap\";\r\n\r\n// 第一种实现方式\r\nexport class Clouds {\r\n  // height设置云朵的高度，num设置云朵的数量\r\n  constructor(\r\n    height = 10,\r\n    num = 300,\r\n    size = 15,\r\n    scale = 10,\r\n    autoRotate = true\r\n  ) {\r\n    let textureLoader = new THREE.TextureLoader();\r\n    const map1 = textureLoader.load(\"./textures/cloud/cloud1.jfif\");\r\n    const map2 = textureLoader.load(\"./textures/cloud/cloud2.jfif\");\r\n    const map3 = textureLoader.load(\"./textures/cloud/cloud3.jpg\");\r\n\r\n    let material1 = new THREE.SpriteMaterial({\r\n      map: map2,\r\n      color: 0xffffff,\r\n      alphaMap: map1,\r\n      transparent: true,\r\n      blending: THREE.AdditiveBlending,\r\n      depthWrite: false,\r\n      depthTest: false,\r\n    });\r\n    let material2 = new THREE.SpriteMaterial({\r\n      map: map3,\r\n      color: 0xffffff,\r\n      alphaMap: map2,\r\n      transparent: true,\r\n      blending: THREE.AdditiveBlending,\r\n      depthWrite: false,\r\n      depthTest: false,\r\n    });\r\n    let material3 = new THREE.SpriteMaterial({\r\n      map: map1,\r\n      color: 0xffffff,\r\n      alphaMap: map3,\r\n      transparent: true,\r\n      blending: THREE.AdditiveBlending,\r\n      depthWrite: false,\r\n      depthTest: false,\r\n    });\r\n\r\n    this.materials = [material1, material2, material3];\r\n    this.mesh = new THREE.Group();\r\n    for (let i = 0; i < num; i++) {\r\n      let index = Math.floor(Math.random() * 3);\r\n      let material = this.materials[index];\r\n      let sprite = new THREE.Sprite(material);\r\n      // 随机设置精灵的大小\r\n      let randomSize = Math.random() * size;\r\n      sprite.scale.set(randomSize, randomSize, randomSize);\r\n      // 随机设置精灵的位置\r\n      let randomX = (Math.random() - 0.5) * 2 * scale;\r\n      let randomY = Math.random() * (height / 2) + height;\r\n      let randomZ = (Math.random() - 0.5) * 2 * scale;\r\n      sprite.position.set(randomX, randomY, randomZ);\r\n      this.mesh.add(sprite);\r\n    }\r\n    if (autoRotate) {\r\n      this.animate();\r\n    }\r\n  }\r\n  animate() {\r\n    gsap.to(this.mesh.rotation, {\r\n      duration: 120,\r\n      repeat: -1,\r\n      y: Math.PI * 2,\r\n    });\r\n  }\r\n}\r\n\r\nexport class CloudsPlus {\r\n  // height设置云朵的高度，num设置云朵的数量\r\n  constructor(\r\n    height = 20,\r\n    num = 100,\r\n    size = 400,\r\n    scale = 100,\r\n    autoRotate = true\r\n  ) {\r\n    this.height = height;\r\n    this.num = num;\r\n    this.size = size;\r\n    this.scale = scale;\r\n    this.autoRotate = autoRotate;\r\n    let textureLoader = new THREE.TextureLoader();\r\n    const map1 = textureLoader.load(\"./textures/cloud/cloud1.jfif\");\r\n    const map2 = textureLoader.load(\"./textures/cloud/cloud2.jfif\");\r\n    const map3 = textureLoader.load(\"./textures/cloud/cloud3.jpg\");\r\n\r\n    let materials = [];\r\n\r\n    let material1 = new THREE.PointsMaterial({\r\n      map: map1,\r\n      color: 0xffffff,\r\n      alphaMap: map2,\r\n      transparent: true,\r\n      blending: THREE.AdditiveBlending,\r\n      depthWrite: false,\r\n      depthTest: false,\r\n      size: 0.2 * size,\r\n    });\r\n    let material2 = new THREE.PointsMaterial({\r\n      map: map2,\r\n      color: 0xffffff,\r\n      alphaMap: map3,\r\n      transparent: true,\r\n      blending: THREE.AdditiveBlending,\r\n      depthWrite: false,\r\n      depthTest: false,\r\n      size: 0.5 * size,\r\n    });\r\n    let material3 = new THREE.PointsMaterial({\r\n      map: map3,\r\n      color: 0xffffff,\r\n      alphaMap: map1,\r\n      transparent: true,\r\n      blending: THREE.AdditiveBlending,\r\n      depthWrite: false,\r\n      depthTest: false,\r\n      size: 0.8 * size,\r\n    });\r\n    let material4 = new THREE.PointsMaterial({\r\n      map: map2,\r\n      color: 0xffffff,\r\n      alphaMap: map1,\r\n      transparent: true,\r\n      blending: THREE.AdditiveBlending,\r\n      depthWrite: false,\r\n      depthTest: false,\r\n      size: 1 * size,\r\n    });\r\n    materials.push(material1, material2, material3, material4);\r\n    this.mesh = new THREE.Group();\r\n\r\n    for (let i = 0; i < materials.length; i++) {\r\n      let material = materials[i];\r\n      let geometry = this.generateGeometry(this.num);\r\n      let points = new THREE.Points(geometry, material);\r\n\r\n      this.mesh.add(points);\r\n    }\r\n    if (autoRotate) {\r\n      this.animate();\r\n    }\r\n  }\r\n  generateGeometry(num = 300) {\r\n    const vertices = [];\r\n    // 创建点位置\r\n    for (let i = 0; i < num; i++) {\r\n      // 随机设置精灵的位置\r\n      let randomX = (Math.random() - 0.5) * 2 * this.scale;\r\n      let randomY = Math.random() * (this.height / 2) + this.height;\r\n      let randomZ = (Math.random() - 0.5) * 2 * this.scale;\r\n      vertices.push(randomX, randomY, randomZ);\r\n    }\r\n    const geometry = new THREE.BufferGeometry();\r\n    geometry.setAttribute(\r\n      \"position\",\r\n      new THREE.Float32BufferAttribute(vertices, 3)\r\n    );\r\n    return geometry;\r\n  }\r\n  animate() {\r\n    let i = 1;\r\n    this.mesh.traverse((item) => {\r\n      let speed = 40 * i;\r\n\r\n      if (item instanceof THREE.Points) {\r\n        // console.log(speed);\r\n        gsap.to(item.rotation, {\r\n          duration: speed,\r\n          repeat: -1,\r\n          y: Math.PI * 2,\r\n        });\r\n      }\r\n      i++;\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}