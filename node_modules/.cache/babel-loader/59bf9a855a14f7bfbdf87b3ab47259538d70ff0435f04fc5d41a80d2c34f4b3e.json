{"ast":null,"code":"import * as THREE from \"three\";\nimport gsap from \"gsap\";\nimport { Water } from \"three/examples/jsm/objects/Water.js\";\nexport default class Ocean {\n  constructor(radius = 50) {\n    this.clock = new THREE.Clock(); // 创建一个计时器\n    // 创建水平\n    const TextureLoader = new THREE.TextureLoader();\n    this.waterGeometry = new THREE.CircleGeometry(radius, 32);\n    this.water = new Water(this.waterGeometry, {\n      textureWidth: 512,\n      textureHeight: 512,\n      waterNormals: new THREE.TextureLoader().load('./textures/waternormals.jpg', function (texture) {\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n      }),\n      alpha: 1.0,\n      //flowDirection: new THREE.Vector2(1, 1),\n      //scale: 100,\n      distortionScale: 3.7,\n      sunColor: 0xffffff,\n      waterColor: 0x001e0f\n    });\n    this.water.position.y = 0;\n    this.water.rotation.x = -Math.PI / 2;\n    this.mesh = this.water;\n    this.water.renderOrder = -1;\n  }\n  animate() {\n    requestAnimationFrame(this.animate.bind(this));\n    this.render();\n  }\n  render() {\n    const delta = this.clock.getDelta(); // 获取时间差\n    this.water.material.uniforms[\"time\"].value += delta; // 更新时间属性\n\n    // 示例：假设存在sphere和renderer等对象\n    // sphere.position.y = Math.sin(performance.now() * 0.001) * 20 + 5;\n    // sphere.rotation.x = performance.now() * 0.001 * 0.5;\n    // sphere.rotation.z = performance.now() * 0.001 * 0.51;\n    // renderer.render(scene, camera);\n  }\n}","map":{"version":3,"names":["THREE","gsap","Water","Ocean","constructor","radius","clock","Clock","TextureLoader","waterGeometry","CircleGeometry","water","textureWidth","textureHeight","waterNormals","load","texture","wrapS","wrapT","RepeatWrapping","alpha","distortionScale","sunColor","waterColor","position","y","rotation","x","Math","PI","mesh","renderOrder","animate","requestAnimationFrame","bind","render","delta","getDelta","material","uniforms","value"],"sources":["E:/three.js/three.js-demo/three-city/city/src/three/mesh/Ocean.js"],"sourcesContent":["import * as THREE from \"three\";\r\nimport gsap from \"gsap\";\r\nimport { Water } from \"three/examples/jsm/objects/Water.js\";\r\n\r\nexport default class Ocean {\r\n  constructor(radius = 50) {\r\n    this.clock = new THREE.Clock(); // 创建一个计时器\r\n    // 创建水平\r\n    const TextureLoader = new THREE.TextureLoader();\r\n    this.waterGeometry = new THREE.CircleGeometry(radius, 32);\r\n    this.water = new Water(this.waterGeometry, {\r\n      textureWidth: 512,\r\n      textureHeight: 512,\r\n      waterNormals: new THREE.TextureLoader().load( './textures/waternormals.jpg', function ( texture ) {\r\n\r\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\r\n\r\n      } ),\r\n      alpha: 1.0,\r\n\r\n      \r\n      //flowDirection: new THREE.Vector2(1, 1),\r\n      //scale: 100,\r\n      distortionScale: 3.7,\r\n      sunColor: 0xffffff,\r\n\t\t\t\t\t\twaterColor: 0x001e0f,\r\n    });\r\n    this.water.position.y = 0;\r\n    this.water.rotation.x = -Math.PI / 2;\r\n    this.mesh = this.water;\r\n    this.water.renderOrder = -1;\r\n\r\n  \r\n  }\r\n \r\n  animate() {\r\n\r\n    requestAnimationFrame(this.animate.bind(this));\r\n    this.render();\r\n\r\n  }\r\n\r\n  render() {\r\n    const delta = this.clock.getDelta(); // 获取时间差\r\n    this.water.material.uniforms[\"time\"].value += delta; // 更新时间属性\r\n\r\n    // 示例：假设存在sphere和renderer等对象\r\n    // sphere.position.y = Math.sin(performance.now() * 0.001) * 20 + 5;\r\n    // sphere.rotation.x = performance.now() * 0.001 * 0.5;\r\n    // sphere.rotation.z = performance.now() * 0.001 * 0.51;\r\n    // renderer.render(scene, camera);\r\n  }\r\n  }\r\n  \r\n\r\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,KAAK,QAAQ,qCAAqC;AAE3D,eAAe,MAAMC,KAAK,CAAC;EACzBC,WAAWA,CAACC,MAAM,GAAG,EAAE,EAAE;IACvB,IAAI,CAACC,KAAK,GAAG,IAAIN,KAAK,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC;IAChC;IACA,MAAMC,aAAa,GAAG,IAAIR,KAAK,CAACQ,aAAa,CAAC,CAAC;IAC/C,IAAI,CAACC,aAAa,GAAG,IAAIT,KAAK,CAACU,cAAc,CAACL,MAAM,EAAE,EAAE,CAAC;IACzD,IAAI,CAACM,KAAK,GAAG,IAAIT,KAAK,CAAC,IAAI,CAACO,aAAa,EAAE;MACzCG,YAAY,EAAE,GAAG;MACjBC,aAAa,EAAE,GAAG;MAClBC,YAAY,EAAE,IAAId,KAAK,CAACQ,aAAa,CAAC,CAAC,CAACO,IAAI,CAAE,6BAA6B,EAAE,UAAWC,OAAO,EAAG;QAEhGA,OAAO,CAACC,KAAK,GAAGD,OAAO,CAACE,KAAK,GAAGlB,KAAK,CAACmB,cAAc;MAEtD,CAAE,CAAC;MACHC,KAAK,EAAE,GAAG;MAGV;MACA;MACAC,eAAe,EAAE,GAAG;MACpBC,QAAQ,EAAE,QAAQ;MAClBC,UAAU,EAAE;IACd,CAAC,CAAC;IACF,IAAI,CAACZ,KAAK,CAACa,QAAQ,CAACC,CAAC,GAAG,CAAC;IACzB,IAAI,CAACd,KAAK,CAACe,QAAQ,CAACC,CAAC,GAAG,CAACC,IAAI,CAACC,EAAE,GAAG,CAAC;IACpC,IAAI,CAACC,IAAI,GAAG,IAAI,CAACnB,KAAK;IACtB,IAAI,CAACA,KAAK,CAACoB,WAAW,GAAG,CAAC,CAAC;EAG7B;EAEAC,OAAOA,CAAA,EAAG;IAERC,qBAAqB,CAAC,IAAI,CAACD,OAAO,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9C,IAAI,CAACC,MAAM,CAAC,CAAC;EAEf;EAEAA,MAAMA,CAAA,EAAG;IACP,MAAMC,KAAK,GAAG,IAAI,CAAC9B,KAAK,CAAC+B,QAAQ,CAAC,CAAC,CAAC,CAAC;IACrC,IAAI,CAAC1B,KAAK,CAAC2B,QAAQ,CAACC,QAAQ,CAAC,MAAM,CAAC,CAACC,KAAK,IAAIJ,KAAK,CAAC,CAAC;;IAErD;IACA;IACA;IACA;IACA;EACF;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}