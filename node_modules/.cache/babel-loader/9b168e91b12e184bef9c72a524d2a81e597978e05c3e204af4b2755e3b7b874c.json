{"ast":null,"code":"// Sun.js\n\nimport * as THREE from 'three';\nimport { Lensflare, LensflareElement } from 'three/examples/jsm/objects/Lensflare.js';\nexport default class Sun {\n  constructor(position = {\n    x: 0,\n    y: 0,\n    z: 0\n  }) {\n    // 创建太阳的主场景\n    this.scene = new THREE.Scene();\n\n    // 创建几何体\n    const geometry = new THREE.SphereGeometry(2.0, 32, 32);\n\n    // 创建主太阳材质\n    this.materialSun = new THREE.ShaderMaterial({\n      vertexShader: this.sunVertexTexture(),\n      fragmentShader: this.sunFragmentTexture(),\n      side: THREE.DoubleSide,\n      uniforms: {\n        uTime: {\n          value: 0\n        },\n        uPerlin: {\n          value: null\n        },\n        cameraPosition: {\n          value: new THREE.Vector3()\n        } // 添加 cameraPosition\n      }\n    });\n\n    // 创建太阳网格并添加到场景中\n    this.Sun = new THREE.Mesh(geometry, this.materialSun);\n    this.Sun.position.set(position.x, position.y, position.z);\n    this.scene.add(this.Sun);\n\n    // // 加载镜头光晕纹理\n    // const textureLoader = new THREE.TextureLoader();\n    // const textureFlare0 = textureLoader.load('path/to/lensflare0.png');\n    // const textureFlare3 = textureLoader.load('path/to/lensflare3.png');\n\n    // 创建 Lensflare 对象并添加元素\n    this.lensflare = new Lensflare();\n    this.lensflare.addElement(new LensflareElement(textureFlare0, 700, 0, new THREE.Color(0xffffff)));\n    this.lensflare.addElement(new LensflareElement(textureFlare3, 60, 0.6));\n    this.lensflare.addElement(new LensflareElement(textureFlare3, 70, 0.7));\n    this.lensflare.addElement(new LensflareElement(textureFlare3, 120, 0.9));\n    this.lensflare.addElement(new LensflareElement(textureFlare3, 70, 1.0));\n\n    // 设置光晕的位置，与太阳的位置同步\n    this.lensflare.position.copy(this.Sun.position);\n\n    // 将光晕添加到太阳的场景中\n    this.scene.add(this.lensflare);\n  }\n\n  // 定义太阳的顶点着色器\n  sunVertexTexture() {\n    return `\n    uniform float uTime;\n    varying vec2 vUv;\n    varying vec3 vPosition;\n    varying vec3 vLayer0;\n    varying vec3 vLayer1;\n    varying vec3 vLayer2;\n    varying vec3 eyeVector;\n    varying vec3 vNormal;\n\n    // 旋转矩阵\n    mat2 rotate(float a){\n        float s = sin(a);\n        float c = cos(a);\n        return mat2(c,-s,s,c);\n    } \n\n    void main()\n    {\n        // uv坐标\n        vUv = uv;\n        // 顶点法线\n        vNormal = normal;\n        // 世界坐标系\n        vec4 WorldPosition = modelMatrix * vec4 (position,1.0);\n        // 顶点到相机的向量\n        eyeVector = normalize(WorldPosition.xyz - cameraPosition);\n\n        // 分别求围绕各个轴所进行的顶点旋转\n        float t = uTime * 0.03;\n        mat2 rot = rotate(t);\n\n        vec3 p0 = position;\n        p0.yz = rot * p0.yz;\n        vLayer0 = p0;\n\n        mat2 rot1 = rotate(t+10.0);\n        vec3 p1 = position;\n        p1.xz = rot1 * p1.xz;\n        vLayer1 = p1;\n\n        mat2 rot2 = rotate(t+30.0);\n        vec3 p2 = position;\n        p2.xy = rot2 * p2.xy;\n        vLayer2 = p2; \n\n        vPosition = position;\n\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }`;\n  }\n\n  // 定义太阳的片段着色器\n  sunFragmentTexture() {\n    return `\n    uniform float uTime;\n    varying vec2 vUv;\n    uniform samplerCube uPerlin;\n    varying vec3 vPosition;\n    varying vec3 vNormal;\n    varying vec3 vLayer0;\n    varying vec3 vLayer1;\n    varying vec3 vLayer2;\n    varying vec3 eyeVector;\n    const float PI = 3.14159265359;\n\n    vec3 brightnessToColor (float b){\n      b *=0.25;\n      return (vec3(b, b*b, b*b*b*b)/0.25)*0.7;\n    }\n\n    // 将各个图层的纹理叠加整合\n    float sun(){\n      float sum = 0.0;\n      sum +=textureCube(uPerlin,vLayer0).r;\n      sum +=textureCube(uPerlin,vLayer1).r;\n      sum +=textureCube(uPerlin,vLayer2).r;\n      sum *=0.40;\n      return sum;\n    }\n\n    // 菲涅耳计算\n    float Fresnel(vec3 eyeVector,vec3 worldNormal){\n        return pow(1.3 + dot(eyeVector,worldNormal),4.0);\n    }\n\n    void main()\n    {\n      // 获取纹理\n      float brightness = sun();\n      // 增加对比度\n      brightness = brightness*4.0+1.0;\n      // 菲涅耳计算模拟反射和折射的光照\n      float fres = Fresnel(eyeVector,vNormal);\n      brightness += fres;\n      // 获取太阳的颜色\n      vec3 color = brightnessToColor(brightness); \n      gl_FragColor = vec4(color,1.0);\n    }`;\n  }\n\n  // 更新函数，在动画循环中调用\n  update(elapsedTime, renderer, camera) {\n    // 更新着色器中的 uTime\n    this.materialSun.uniforms.uTime.value = elapsedTime;\n\n    // 更新 cameraPosition\n    this.materialSun.uniforms.cameraPosition.value.copy(camera.position);\n\n    // 更新光晕的位置（如果太阳或相机会移动）\n    this.lensflare.position.copy(this.Sun.position);\n  }\n}","map":{"version":3,"names":["THREE","Lensflare","LensflareElement","Sun","constructor","position","x","y","z","scene","Scene","geometry","SphereGeometry","materialSun","ShaderMaterial","vertexShader","sunVertexTexture","fragmentShader","sunFragmentTexture","side","DoubleSide","uniforms","uTime","value","uPerlin","cameraPosition","Vector3","Mesh","set","add","lensflare","addElement","textureFlare0","Color","textureFlare3","copy","update","elapsedTime","renderer","camera"],"sources":["E:/three.js/three.js-demo/three-city/city/src/three/mesh/sun.js"],"sourcesContent":["// Sun.js\r\n\r\nimport * as THREE from 'three';\r\nimport { Lensflare, LensflareElement } from 'three/examples/jsm/objects/Lensflare.js';\r\n\r\nexport default class Sun {\r\n  constructor(position = { x: 0, y: 0, z: 0 }) {\r\n    // 创建太阳的主场景\r\n    this.scene = new THREE.Scene();\r\n\r\n    // 创建几何体\r\n    const geometry = new THREE.SphereGeometry(2.0, 32, 32);\r\n\r\n    // 创建主太阳材质\r\n    this.materialSun = new THREE.ShaderMaterial({\r\n      vertexShader: this.sunVertexTexture(),\r\n      fragmentShader: this.sunFragmentTexture(),\r\n      side: THREE.DoubleSide,\r\n      uniforms: {\r\n        uTime: { value: 0 },\r\n        uPerlin: { value: null },\r\n        cameraPosition: { value: new THREE.Vector3() }, // 添加 cameraPosition\r\n      },\r\n    });\r\n\r\n    // 创建太阳网格并添加到场景中\r\n    this.Sun = new THREE.Mesh(geometry, this.materialSun);\r\n    this.Sun.position.set(position.x, position.y, position.z);\r\n    this.scene.add(this.Sun);\r\n\r\n    // // 加载镜头光晕纹理\r\n    // const textureLoader = new THREE.TextureLoader();\r\n    // const textureFlare0 = textureLoader.load('path/to/lensflare0.png');\r\n    // const textureFlare3 = textureLoader.load('path/to/lensflare3.png');\r\n\r\n    // 创建 Lensflare 对象并添加元素\r\n    this.lensflare = new Lensflare();\r\n    this.lensflare.addElement(new LensflareElement(textureFlare0, 700, 0, new THREE.Color(0xffffff)));\r\n    this.lensflare.addElement(new LensflareElement(textureFlare3, 60, 0.6));\r\n    this.lensflare.addElement(new LensflareElement(textureFlare3, 70, 0.7));\r\n    this.lensflare.addElement(new LensflareElement(textureFlare3, 120, 0.9));\r\n    this.lensflare.addElement(new LensflareElement(textureFlare3, 70, 1.0));\r\n\r\n    // 设置光晕的位置，与太阳的位置同步\r\n    this.lensflare.position.copy(this.Sun.position);\r\n\r\n    // 将光晕添加到太阳的场景中\r\n    this.scene.add(this.lensflare);\r\n  }\r\n\r\n  // 定义太阳的顶点着色器\r\n  sunVertexTexture() {\r\n    return `\r\n    uniform float uTime;\r\n    varying vec2 vUv;\r\n    varying vec3 vPosition;\r\n    varying vec3 vLayer0;\r\n    varying vec3 vLayer1;\r\n    varying vec3 vLayer2;\r\n    varying vec3 eyeVector;\r\n    varying vec3 vNormal;\r\n\r\n    // 旋转矩阵\r\n    mat2 rotate(float a){\r\n        float s = sin(a);\r\n        float c = cos(a);\r\n        return mat2(c,-s,s,c);\r\n    } \r\n\r\n    void main()\r\n    {\r\n        // uv坐标\r\n        vUv = uv;\r\n        // 顶点法线\r\n        vNormal = normal;\r\n        // 世界坐标系\r\n        vec4 WorldPosition = modelMatrix * vec4 (position,1.0);\r\n        // 顶点到相机的向量\r\n        eyeVector = normalize(WorldPosition.xyz - cameraPosition);\r\n\r\n        // 分别求围绕各个轴所进行的顶点旋转\r\n        float t = uTime * 0.03;\r\n        mat2 rot = rotate(t);\r\n\r\n        vec3 p0 = position;\r\n        p0.yz = rot * p0.yz;\r\n        vLayer0 = p0;\r\n\r\n        mat2 rot1 = rotate(t+10.0);\r\n        vec3 p1 = position;\r\n        p1.xz = rot1 * p1.xz;\r\n        vLayer1 = p1;\r\n\r\n        mat2 rot2 = rotate(t+30.0);\r\n        vec3 p2 = position;\r\n        p2.xy = rot2 * p2.xy;\r\n        vLayer2 = p2; \r\n\r\n        vPosition = position;\r\n\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }`;\r\n  }\r\n\r\n  // 定义太阳的片段着色器\r\n  sunFragmentTexture() {\r\n    return `\r\n    uniform float uTime;\r\n    varying vec2 vUv;\r\n    uniform samplerCube uPerlin;\r\n    varying vec3 vPosition;\r\n    varying vec3 vNormal;\r\n    varying vec3 vLayer0;\r\n    varying vec3 vLayer1;\r\n    varying vec3 vLayer2;\r\n    varying vec3 eyeVector;\r\n    const float PI = 3.14159265359;\r\n\r\n    vec3 brightnessToColor (float b){\r\n      b *=0.25;\r\n      return (vec3(b, b*b, b*b*b*b)/0.25)*0.7;\r\n    }\r\n\r\n    // 将各个图层的纹理叠加整合\r\n    float sun(){\r\n      float sum = 0.0;\r\n      sum +=textureCube(uPerlin,vLayer0).r;\r\n      sum +=textureCube(uPerlin,vLayer1).r;\r\n      sum +=textureCube(uPerlin,vLayer2).r;\r\n      sum *=0.40;\r\n      return sum;\r\n    }\r\n\r\n    // 菲涅耳计算\r\n    float Fresnel(vec3 eyeVector,vec3 worldNormal){\r\n        return pow(1.3 + dot(eyeVector,worldNormal),4.0);\r\n    }\r\n\r\n    void main()\r\n    {\r\n      // 获取纹理\r\n      float brightness = sun();\r\n      // 增加对比度\r\n      brightness = brightness*4.0+1.0;\r\n      // 菲涅耳计算模拟反射和折射的光照\r\n      float fres = Fresnel(eyeVector,vNormal);\r\n      brightness += fres;\r\n      // 获取太阳的颜色\r\n      vec3 color = brightnessToColor(brightness); \r\n      gl_FragColor = vec4(color,1.0);\r\n    }`;\r\n  }\r\n\r\n  // 更新函数，在动画循环中调用\r\n  update(elapsedTime, renderer, camera) {\r\n    // 更新着色器中的 uTime\r\n    this.materialSun.uniforms.uTime.value = elapsedTime;\r\n\r\n    // 更新 cameraPosition\r\n    this.materialSun.uniforms.cameraPosition.value.copy(camera.position);\r\n\r\n    // 更新光晕的位置（如果太阳或相机会移动）\r\n    this.lensflare.position.copy(this.Sun.position);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}