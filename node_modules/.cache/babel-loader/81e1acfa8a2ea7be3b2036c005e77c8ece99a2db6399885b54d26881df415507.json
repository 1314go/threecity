{"ast":null,"code":"import { onMounted, ref } from 'vue';\nimport * as THREE from \"three\";\n\n//导入场景\nimport scene from '@/three/scene';\n//导入相机\nimport camera from '@/three/camera';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport gsap from \"gsap\";\nimport * as dat from \"dat.gui\";\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader.js\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\n//场景元素div\n\nexport default {\n  __name: 'Scene',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    let sceneDiv = ref(null);\n\n    //创建gui对象\n    const gui = new dat.GUI();\n\n    // console.log(THREE);\n    // 初始化场\n    //const scene = new THREE.Scene();\n\n    // // 创建透视相机\n    // const camera = new THREE.PerspectiveCamera(\n    //   75,\n    //   window.innerHeight / window.innerHeight,\n    //   1,\n    //   50\n    // );\n    // // 设置相机位置\n    // // object3d具有position，属性是1个3维的向量\n    // camera.position.set(0, 0, 10);\n    // scene.add(camera);\n\n    // 加入辅助轴，帮助我们查看3维坐标轴\n    const axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    // const planeGeometry = new THREE.PlaneBufferGeometry(20, 20);\n    // const planeMaterial = new THREE.MeshStandardMaterial();\n    // const plane = new THREE.Mesh(planeGeometry, planeMaterial);\n\n    // plane.position.set(0, 0, -6);\n    // plane.receiveShadow = true;\n    // scene.add(plane);\n\n    // 初始化渲染器\n    const renderer = new THREE.WebGLRenderer();\n    // 设置渲染尺寸大小\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n\n    // 监听屏幕大小改变的变化，设置渲染的尺寸\n    window.addEventListener(\"resize\", () => {\n      //   console.log(\"resize\");\n      // 更新摄像头\n      camera.aspect = window.innerWidth / window.innerHeight;\n      //   更新摄像机的投影矩阵\n      camera.updateProjectionMatrix();\n\n      //   更新渲染器\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      //   设置渲染器的像素比例\n      renderer.setPixelRatio(window.devicePixelRatio);\n    });\n\n    // 初始化控制器\n    const controls = new OrbitControls(camera, renderer.domElement);\n    // 设置控制器阻尼\n    controls.enableDamping = true;\n    // 设置自动旋转\n    // controls.autoRotate = true;\n    onMounted(() => {\n      sceneDiv.value.appendChild(renderer.domElement);\n      animate();\n    });\n    const clock = new THREE.Clock();\n    function animate(t) {\n      controls.update();\n      const time = clock.getElapsedTime();\n      requestAnimationFrame(animate);\n      // 使用渲染器渲染相机看这个场景的内容渲染出来\n      renderer.render(scene, camera);\n    }\n    const __returned__ = {\n      get sceneDiv() {\n        return sceneDiv;\n      },\n      set sceneDiv(v) {\n        sceneDiv = v;\n      },\n      gui,\n      axesHelper,\n      renderer,\n      controls,\n      clock,\n      animate,\n      onMounted,\n      ref,\n      get THREE() {\n        return THREE;\n      },\n      get scene() {\n        return scene;\n      },\n      get camera() {\n        return camera;\n      },\n      get OrbitControls() {\n        return OrbitControls;\n      },\n      get gsap() {\n        return gsap;\n      },\n      get dat() {\n        return dat;\n      },\n      get RGBELoader() {\n        return RGBELoader;\n      },\n      get GLTFLoader() {\n        return GLTFLoader;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["onMounted","ref","THREE","scene","camera","OrbitControls","gsap","dat","RGBELoader","GLTFLoader","sceneDiv","gui","GUI","axesHelper","AxesHelper","add","renderer","WebGLRenderer","setSize","window","innerWidth","innerHeight","shadowMap","enabled","addEventListener","aspect","updateProjectionMatrix","setPixelRatio","devicePixelRatio","controls","domElement","enableDamping","value","appendChild","animate","clock","Clock","t","update","time","getElapsedTime","requestAnimationFrame","render"],"sources":["E:/three.js/three.js-demo/three-city/city/src/components/Scene.vue"],"sourcesContent":["<template>\r\n  <div class=\"scene\" ref=\"sceneDiv\"></div>\r\n</template>\r\n\r\n<script setup>\r\nimport {onMounted,ref} from 'vue';\r\nimport * as THREE from \"three\";\r\n\r\n//导入场景\r\nimport scene from '@/three/scene';\r\n//导入相机\r\nimport camera from '@/three/camera';\r\n\r\n\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport gsap from \"gsap\";\r\nimport * as dat from \"dat.gui\";\r\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader.js\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\n\r\n//场景元素div\r\nlet sceneDiv=ref(null);\r\n\r\n//创建gui对象\r\nconst gui = new dat.GUI();\r\n\r\n// console.log(THREE);\r\n// 初始化场\r\n//const scene = new THREE.Scene();\r\n\r\n// // 创建透视相机\r\n// const camera = new THREE.PerspectiveCamera(\r\n//   75,\r\n//   window.innerHeight / window.innerHeight,\r\n//   1,\r\n//   50\r\n// );\r\n// // 设置相机位置\r\n// // object3d具有position，属性是1个3维的向量\r\n// camera.position.set(0, 0, 10);\r\n// scene.add(camera);\r\n\r\n// 加入辅助轴，帮助我们查看3维坐标轴\r\nconst axesHelper = new THREE.AxesHelper(5);\r\nscene.add(axesHelper);\r\n\r\n// const planeGeometry = new THREE.PlaneBufferGeometry(20, 20);\r\n// const planeMaterial = new THREE.MeshStandardMaterial();\r\n// const plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n\r\n// plane.position.set(0, 0, -6);\r\n// plane.receiveShadow = true;\r\n// scene.add(plane);\r\n\r\n// 初始化渲染器\r\nconst renderer = new THREE.WebGLRenderer();\r\n// 设置渲染尺寸大小\r\nrenderer.setSize(window.innerWidth, window.innerHeight);\r\nrenderer.shadowMap.enabled = true;\r\n\r\n// 监听屏幕大小改变的变化，设置渲染的尺寸\r\nwindow.addEventListener(\"resize\", () => {\r\n  //   console.log(\"resize\");\r\n  // 更新摄像头\r\n  camera.aspect = window.innerWidth / window.innerHeight;\r\n  //   更新摄像机的投影矩阵\r\n  camera.updateProjectionMatrix();\r\n\r\n  //   更新渲染器\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n  //   设置渲染器的像素比例\r\n  renderer.setPixelRatio(window.devicePixelRatio);\r\n});\r\n\r\n// 初始化控制器\r\nconst controls = new OrbitControls(camera, renderer.domElement);\r\n// 设置控制器阻尼\r\ncontrols.enableDamping = true;\r\n// 设置自动旋转\r\n// controls.autoRotate = true;\r\nonMounted(()=>{\r\n  sceneDiv.value.appendChild(renderer.domElement);\r\n  animate();\r\n})\r\nconst clock = new THREE.Clock();\r\nfunction animate(t) {\r\n  controls.update();\r\n  const time = clock.getElapsedTime();\r\n  \r\n  requestAnimationFrame(animate);\r\n  // 使用渲染器渲染相机看这个场景的内容渲染出来\r\n  renderer.render(scene, camera);\r\n}\r\n</script>\r\n\r\n<style >\r\n.scene{\r\n  width: 100vw;\r\n  height: 100vw;\r\n  position:absolute;\r\n  z-index: 100;\r\n  left: 0;\r\n  top:0;\r\n}\r\n\r\n</style>"],"mappings":"AAKA,SAAQA,SAAS,EAACC,GAAG,QAAO,KAAK;AACjC,OAAO,KAAKC,KAAK,MAAM,OAAO;;AAE9B;AACA,OAAOC,KAAK,MAAM,eAAe;AACjC;AACA,OAAOC,MAAM,MAAM,gBAAgB;AAGnC,SAASC,aAAa,QAAQ,2CAA2C;AACzE,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAO,KAAKC,GAAG,MAAM,SAAS;AAC9B,SAASC,UAAU,QAAQ,0CAA0C;AACrE,SAASC,UAAU,QAAQ,uCAAuC;;AAElE;;;;;;;;IACA,IAAIC,QAAQ,GAACT,GAAG,CAAC,IAAI,CAAC;;IAEtB;IACA,MAAMU,GAAG,GAAG,IAAIJ,GAAG,CAACK,GAAG,CAAC,CAAC;;IAEzB;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA,MAAMC,UAAU,GAAG,IAAIX,KAAK,CAACY,UAAU,CAAC,CAAC,CAAC;IAC1CX,KAAK,CAACY,GAAG,CAACF,UAAU,CAAC;;IAErB;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA,MAAMG,QAAQ,GAAG,IAAId,KAAK,CAACe,aAAa,CAAC,CAAC;IAC1C;IACAD,QAAQ,CAACE,OAAO,CAACC,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACvDL,QAAQ,CAACM,SAAS,CAACC,OAAO,GAAG,IAAI;;IAEjC;IACAJ,MAAM,CAACK,gBAAgB,CAAC,QAAQ,EAAE,MAAM;MACtC;MACA;MACApB,MAAM,CAACqB,MAAM,GAAGN,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW;MACtD;MACAjB,MAAM,CAACsB,sBAAsB,CAAC,CAAC;;MAE/B;MACAV,QAAQ,CAACE,OAAO,CAACC,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;MACvD;MACAL,QAAQ,CAACW,aAAa,CAACR,MAAM,CAACS,gBAAgB,CAAC;IACjD,CAAC,CAAC;;IAEF;IACA,MAAMC,QAAQ,GAAG,IAAIxB,aAAa,CAACD,MAAM,EAAEY,QAAQ,CAACc,UAAU,CAAC;IAC/D;IACAD,QAAQ,CAACE,aAAa,GAAG,IAAI;IAC7B;IACA;IACA/B,SAAS,CAAC,MAAI;MACZU,QAAQ,CAACsB,KAAK,CAACC,WAAW,CAACjB,QAAQ,CAACc,UAAU,CAAC;MAC/CI,OAAO,CAAC,CAAC;IACX,CAAC,CAAC;IACF,MAAMC,KAAK,GAAG,IAAIjC,KAAK,CAACkC,KAAK,CAAC,CAAC;IAC/B,SAASF,OAAOA,CAACG,CAAC,EAAE;MAClBR,QAAQ,CAACS,MAAM,CAAC,CAAC;MACjB,MAAMC,IAAI,GAAGJ,KAAK,CAACK,cAAc,CAAC,CAAC;MAEnCC,qBAAqB,CAACP,OAAO,CAAC;MAC9B;MACAlB,QAAQ,CAAC0B,MAAM,CAACvC,KAAK,EAAEC,MAAM,CAAC;IAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}