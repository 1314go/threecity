{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"scene\",\n  ref: \"sceneDiv\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1"],"sources":["E:\\three.js\\three.js-demo\\three-city\\city\\src\\components\\Scene.vue"],"sourcesContent":["<template>\r\n  <div class=\"scene\" ref=\"sceneDiv\"></div>\r\n</template>\r\n\r\n<script setup>import { onMounted, ref, watch } from \"vue\";\r\nimport * as THREE from \"three\";\r\nimport gsap from \"gsap\";\r\n\r\n// 导入gui对象\r\nimport gui from \"@/three/gui\";\r\n// 导入场景\r\nimport scene from \"@/three/scene\";\r\n// 导入相机\r\nimport camera from \"@/three/camera\";\r\n// 导入控制器\r\nimport controls from \"@/three/controls\";\r\n// 导入辅助坐标轴\r\nimport axesHelper from \"@/three/axesHelper\";\r\n// 导入渲染器\r\nimport renderer from \"@/three/renderer\";\r\n// 初始化调整屏幕\r\nimport \"@/three/init\";\r\n// 导入添加物体函数\r\nimport createMesh from \"@/three/createMesh\";\r\n// 导入每一帧的执行函数\r\nimport animate from \"@/three/animate\";\r\nimport AlarmSprite from \"@/three/mesh/AlarmSprite\";\r\nimport LightWall from \"@/three/mesh/LightWall\";\r\nimport FlyLineShader from \"@/three/mesh/FlyLineShader\";\r\nimport LightRadar from \"@/three/mesh/LightRadar\";\r\nimport eventHub from \"@/utils/eventHub\";\r\n\r\n//场景元素div\r\nlet sceneDiv=ref(null);\r\n\r\n\r\n\r\n// console.log(THREE);\r\n// 初始化场景\r\n\r\n\r\n// 创建透视相机\r\n\r\n// 设置相机位置\r\n// object3d具有position，属性是1个3维的向量\r\ncamera.position.set(0, 0, 10);\r\nscene.add(camera);\r\n\r\n// 加入辅助轴，帮助我们查看3维坐标轴\r\n\r\nscene.add(axesHelper);\r\n\r\nconst plane = new THREE.Mesh(\r\n  new THREE.PlaneBufferGeometry(20, 20),\r\n  new THREE.MeshStandardMaterial()\r\n);\r\nplane.position.set(0, 0, -6);\r\nplane.receiveShadow = true;\r\nscene.add(plane);\r\n\r\n// 初始化渲染器\r\n\r\n// 设置渲染尺寸大小\r\nrenderer.setSize(window.innerWidth, window.innerHeight);\r\nrenderer.shadowMap.enabled = true;\r\n\r\n// 监听屏幕大小改变的变化，设置渲染的尺寸\r\nwindow.addEventListener(\"resize\", () => {\r\n  //   console.log(\"resize\");\r\n  // 更新摄像头\r\n  camera.aspect = window.innerWidth / window.innerHeight;\r\n  //   更新摄像机的投影矩阵\r\n  camera.updateProjectionMatrix();\r\n\r\n  //   更新渲染器\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n  //   设置渲染器的像素比例\r\n  renderer.setPixelRatio(window.devicePixelRatio);\r\n});\r\nonMounted(()=>{\r\n  console.log(sceneDiv.value)\r\n})\r\n</script>\r\n\r\n<style >\r\n.scene{\r\n  width: 100vw;\r\n  height: 100vw;\r\n  position:absolute;\r\n  z-index: 100;\r\n  left: 0;\r\n  top:0;\r\n}\r\n\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC,OAAO;EAACC,GAAG,EAAC;;;uBAAvBC,mBAAA,CAAwC,OAAxCC,UAAwC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}